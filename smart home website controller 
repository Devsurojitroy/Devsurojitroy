Frontend Codea. React Setupnpx create-react-app smart-home-controller
cd smart-home-controller
npm install redux react-redux styled-components socket.io-clientb. Folder Structuresrc/
│
├── components/
│   ├── Dashboard.js
│   ├── DeviceControl.js
│   ├── SceneControl.js
│   ├── CameraFeed.js
│   └── ...
│
├── pages/
│   ├── Home.js
│   ├── Login.js
│   ├── Settings.js
│   └── ...
│
├── redux/
│   ├── store.js
│   ├── reducers.js
│   └── actions.js
│
├── styles/
│   ├── GlobalStyle.js
│   └── theme.js
│
├── App.js
└── index.jsc. Redux Store Setup (redux/store.js)import { createStore, combineReducers } from 'redux';
import deviceReducer from './reducers';

const rootReducer = combineReducers({
    devices: deviceReducer,
    // other reducers
});

const store = createStore(rootReducer);

export default store;d. Device Control Component (components/DeviceControl.js)import React from 'react';
import styled from 'styled-components';
import { useDispatch } from 'react-redux';
import { toggleDevice } from '../redux/actions';

const DeviceControlWrapper = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;

const ToggleButton = styled.button`
  background-color: ${({ isOn }) => (isOn ? '#00FF00' : '#FF0000')};
  border: none;
  padding: 10px;
  color: white;
  cursor: pointer;
`;

const DeviceControl = ({ device }) => {
    const dispatch = useDispatch();

    const handleToggle = () => {
        dispatch(toggleDevice(device.id));
    };

    return (
        <DeviceControlWrapper>
            <h3>{device.name}</h3>
            <ToggleButton isOn={device.isOn} onClick={handleToggle}>
                {device.isOn ? 'Turn Off' : 'Turn On'}
            </ToggleButton>
        </DeviceControlWrapper>
    );
};

export default DeviceControl;e. Dashboard Component (components/Dashboard.js)import React from 'react';
import { useSelector } from 'react-redux';
import DeviceControl from './DeviceControl';

const Dashboard = () => {
    const devices = useSelector(state => state.devices);

    return (
        <div>
            <h2>Smart Home Dashboard</h2>
            <div>
                {devices.map(device => (
                    <DeviceControl key={device.id} device={device} />
                ))}
            </div>
        </div>
    );
};

export default Dashboard;3. Backend Codea. Express Setupmkdir smart-home-backend
cd smart-home-backend
npm init -y
npm install express mongoose bcryptjs jsonwebtoken socket.iob. Folder Structurebackend/
│
├── controllers/
│   ├── authController.js
│   ├── deviceController.js
│   └── ...
│
├── models/
│   ├── Device.js
│   ├── User.js
│   └── ...
│
├── routes/
│   ├── authRoutes.js
│   ├── deviceRoutes.js
│   └── ...
│
├── middleware/
│   └── authMiddleware.js
│
├── config/
│   └── db.js
│
└── server.jsc. Device Model (models/Device.js)const mongoose = require('mongoose');

const deviceSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
    },
    isOn: {
        type: Boolean,
        default: false,
    },
    type: {
        type: String,
        required: true,
    },
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
    },
});

module.exports = mongoose.model('Device', deviceSchema);d. Device Controller (controllers/deviceController.js)const Device = require('../models/Device');

exports.toggleDevice = async (req, res) => {
    try {
        const device = await Device.findById(req.params.id);
        device.isOn = !device.isOn;
        await device.save();
        res.status(200).json(device);
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
};e. Device Routes (routes/deviceRoutes.js)const express = require('express');
const { toggleDevice } = require('../controllers/deviceController');
const router = express.Router();

router.put('/toggle/:id', toggleDevice);

module.exports = router;4. WebSocket Integrationa. Socket.IO Server Setup (server.js)const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const app = express();

const server = http.createServer(app);
const io = socketIo(server);

io.on('connection', (socket) => {
    console.log('New client connected');
    
    socket.on('toggleDevice', (deviceId) => {
        io.emit('deviceToggled', deviceId);
    });

    socket.on('disconnect', () => {
        console.log('Client disconnected');
    });
});

server.listen(5000, () => {
    console.log('Server is running on port 5000');
});b. Socket.IO Client Setup (DeviceControl.js)import io from 'socket.io-client';

const socket = io('http://localhost:5000');

const DeviceControl = ({ device }) => {
    // ... existing code ...

    useEffect(() => {
        socket.on('deviceToggled', (deviceId) => {
            if (deviceId === device.id) {
                dispatch(toggleDevice(deviceId));
            }
        });

        return () => {
            socket.off('deviceToggled');
        };
    }, [device.id, dispatch]);

    return (
        // ... existing JSX ...
    );
};