using html , css , javascript 
.
.
.
html
.
.
.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube-like Video Player</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

<div class="video-container">
    <video id="video" class="video" width="640" height="360">
        <source src="your-video-file.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

    <div class="controls">
        <button id="play-pause" class="control-button">Play</button>
        <button id="rewind" class="control-button">-10s</button>
        <button id="forward" class="control-button">+10s</button>
        <input type="range" id="progress-bar" value="0" class="progress-bar">
        <span id="time-elapsed">00:00</span> / <span id="time-duration">00:00</span>
        <button id="mute-unmute" class="control-button">Mute</button>
        <input type="range" id="volume" min="0" max="1" step="0.1" value="1">
        <select id="playback-speed" class="control-select">
            <option value="0.5">0.5x</option>
            <option value="1" selected>1x</option>
            <option value="1.5">1.5x</option>
            <option value="2">2x</option>
        </select>
        <button id="fullscreen" class="control-button">Fullscreen</button>
    </div>
</div>

<script src="script.js"></script>
</body>
</html>
.
.
.
css 
.
.
.
body {
    font-family: Arial, sans-serif;
    background-color: #000;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.video-container {
    position: relative;
    width: 640px;
    background-color: #333;
    border-radius: 8px;
    overflow: hidden;
}

video {
    width: 100%;
    display: block;
}

.controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    background-color: #222;
}

.control-button, .control-select {
    background: none;
    border: none;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
    margin: 0 5px;
}

.control-select {
    background-color: #444;
    border-radius: 4px;
    padding: 2px 5px;
}

.progress-bar {
    flex-grow: 1;
    margin: 0 10px;
    cursor: pointer;
}

#volume {
    width: 100px;
    cursor: pointer;
}

#time-elapsed, #time-duration {
    font-size: 14px;
}
 
.
.
.
JavaScript 
.
.
.
const video = document.getElementById('video');
const playPauseButton = document.getElementById('play-pause');
const rewindButton = document.getElementById('rewind');
const forwardButton = document.getElementById('forward');
const progressBar = document.getElementById('progress-bar');
const timeElapsed = document.getElementById('time-elapsed');
const timeDuration = document.getElementById('time-duration');
const muteUnmuteButton = document.getElementById('mute-unmute');
const volumeControl = document.getElementById('volume');
const playbackSpeedSelect = document.getElementById('playback-speed');
const fullscreenButton = document.getElementById('fullscreen');

// Play/Pause functionality
playPauseButton.addEventListener('click', () => {
    if (video.paused) {
        video.play();
        playPauseButton.textContent = 'Pause';
    } else {
        video.pause();
        playPauseButton.textContent = 'Play';
    }
});

// Rewind 10 seconds
rewindButton.addEventListener('click', () => {
    video.currentTime -= 10;
});

// Forward 10 seconds
forwardButton.addEventListener('click', () => {
    video.currentTime += 10;
});

// Update progress bar and time
video.addEventListener('timeupdate', () => {
    const currentTime = video.currentTime;
    const duration = video.duration;
    progressBar.value = (currentTime / duration) * 100;

    // Format time (MM:SS)
    const formatTime = (time) => {
        const minutes = Math.floor(time / 60);
        const seconds = Math.floor(time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    timeElapsed.textContent = formatTime(currentTime);
    timeDuration.textContent = formatTime(duration);
});

// Seek functionality
progressBar.addEventListener('input', () => {
    const duration = video.duration;
    video.currentTime = (progressBar.value / 100) * duration;
});

// Mute/Unmute functionality
muteUnmuteButton.addEventListener('click', () => {
    video.muted = !video.muted;
    muteUnmuteButton.textContent = video.muted ? 'Unmute' : 'Mute';
});

// Volume control
volumeControl.addEventListener('input', () => {
    video.volume = volumeControl.value;
    if (video.volume == 0) {
        muteUnmuteButton.textContent = 'Unmute';
        video.muted = true;
    } else {
        muteUnmuteButton.textContent = 'Mute';
        video.muted = false;
    }
});

// Playback speed control
playbackSpeedSelect.addEventListener('change', () => {
    video.playbackRate = playbackSpeedSelect.value;
});

// Fullscreen functionality
fullscreenButton.addEventListener('click', () => {
    if (!document.fullscreenElement) {
        video.requestFullscreen();
    } else {
        document.exitFullscreen();
    }
});

// Exit fullscreen event
document.addEventListener('fullscreenchange', () => {
    if (!document.fullscreenElement) {
        fullscreenButton.textContent = 'Fullscreen';
    } else {
        fullscreenButton.textContent = 'Exit Fullscreen';
    }
});